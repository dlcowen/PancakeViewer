# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.7.2 on Tue May 31 22:36:07 2016
#

import os
import wx
import wx.dataview
import logging

from libblister.EvidenceEnumerator import EvidenceManager
from libblister import FileSystemEnumerator
from libblister import Properties
from wx.propgrid import PropertyGrid

# begin wxGlade: dependencies
import wx.propgrid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.MainFrame_menubar = wx.MenuBar()
        self.File = wx.Menu()
        self.Open = wx.MenuItem(self.File, wx.ID_ANY, _("Open"), "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.Open)
        self.File.AppendSeparator()
        self.Exit = wx.MenuItem(self.File, wx.ID_ANY, _("Exit"), "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.Exit)
        self.MainFrame_menubar.Append(self.File, _("File"))
        self.SetMenuBar(self.MainFrame_menubar)
        # Menu Bar end
        self.MainFrame_statusbar = self.CreateStatusBar(1)
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY)
        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)
        self.window_2 = wx.SplitterWindow(self.window_1_pane_1, wx.ID_ANY)
        self.window_2_pane_1 = wx.Panel(self.window_2, wx.ID_ANY)
        self.tree_fs = wx.TreeCtrl(self.window_2_pane_1, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_HIDE_ROOT)
        self.window_2_pane_2 = wx.Panel(self.window_2, wx.ID_ANY, style=wx.BORDER_SIMPLE | wx.TAB_TRAVERSAL)
        self.notebook_1 = wx.Notebook(self.window_2_pane_2, wx.ID_ANY)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.property_grid_1 = PropertyGrid(self.notebook_1_pane_1, wx.ID_ANY)
        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY, style=wx.BORDER_SIMPLE | wx.TAB_TRAVERSAL)
        self.window_3 = wx.SplitterWindow(self.window_1_pane_2, wx.ID_ANY)
        self.window_3_pane_1 = wx.Panel(self.window_3, wx.ID_ANY)
        self.list_records = wx.ListCtrl(self.window_3_pane_1, wx.ID_ANY, style=wx.LC_LIST)
        self.window_3_pane_2 = wx.Panel(self.window_3, wx.ID_ANY)
        self.notebook_2 = wx.Notebook(self.window_3_pane_2, wx.ID_ANY, style=wx.NB_MULTILINE)
        self.notebook_2_pane_1 = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.text_hex = wx.TextCtrl(self.notebook_2_pane_1, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.notebook_2_pane_2 = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.text_text = wx.TextCtrl(self.notebook_2_pane_2, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OpenSource, self.Open)
        self.Bind(wx.EVT_MENU, self.ExitApplication, self.Exit)
        self.Bind(wx.EVT_TREE_ITEM_GETTOOLTIP, self.tree_fs_item_gettooltip, self.tree_fs)
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.tree_fs_sel_changed, self.tree_fs)
        self.Bind(wx.EVT_TREE_ITEM_EXPANDING, self.tree_fs_item_expanding, self.tree_fs)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.tree_fs_item_activated, self.tree_fs)
        self.Bind(wx.EVT_TREE_ITEM_COLLAPSING, self.tree_fs_item_collapsing, self.tree_fs)
        self.Bind(wx.EVT_TREE_ITEM_COLLAPSED, self.tree_fs_item_collapsed, self.tree_fs)
        self.Bind(wx.EVT_TREE_ITEM_EXPANDED, self.tree_fs_item_expanded, self.tree_fs)
        self.Bind(wx.EVT_TREE_SEL_CHANGING, self.tree_fs_sel_changing, self.tree_fs)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.list_records_item_selected, self.list_records)
        self.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.list_records_item_focused, self.list_records)
        self.Bind(wx.EVT_LIST_INSERT_ITEM, self.list_records_insert_item, self.list_records)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.list_records_col_click, self.list_records)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.list_records_item_activated, self.list_records)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.list_records_item_deselected, self.list_records)
        self.Bind(wx.EVT_LIST_COL_RIGHT_CLICK, self.list_records_col_right_click, self.list_records)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.list_records_item_right_click, self.list_records)
        # end wxGlade
        self.evidenceManager = EvidenceManager(
            self
        )
        self.fileSystemManager = FileSystemEnumerator.FileSystemManager(
            self
        )
        self.LoadIconList()
        dt = MyFileDropTarget(self)
        self.tree_fs.SetDropTarget(dt)

        #Root Containers
        self.tree_fs_root = self.tree_fs.AddRoot('root')

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle(_("Pancake Viewer"))
        self.SetSize((978, 584))
        self.MainFrame_statusbar.SetStatusWidths([-1])
        
        # statusbar fields
        MainFrame_statusbar_fields = [_("MainFrame_statusbar")]
        for i in range(len(MainFrame_statusbar_fields)):
            self.MainFrame_statusbar.SetStatusText(MainFrame_statusbar_fields[i], i)
        self.window_2.SetMinimumPaneSize(20)
        self.window_3.SetMinimumPaneSize(20)
        self.window_1.SetMinimumPaneSize(80)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.tree_fs, 1, wx.EXPAND, 0)
        self.window_2_pane_1.SetSizer(sizer_3)
        sizer_8.Add(self.property_grid_1, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(sizer_8)
        self.notebook_1.AddPage(self.notebook_1_pane_1, _("Properties"))
        sizer_4.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.window_2_pane_2.SetSizer(sizer_4)
        self.window_2.SplitHorizontally(self.window_2_pane_1, self.window_2_pane_2, 300)
        sizer_2.Add(self.window_2, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_2)
        sizer_6.Add(self.list_records, 1, wx.EXPAND, 0)
        self.window_3_pane_1.SetSizer(sizer_6)
        sizer_9.Add(self.text_hex, 1, wx.EXPAND, 0)
        self.notebook_2_pane_1.SetSizer(sizer_9)
        sizer_10.Add(self.text_text, 1, wx.EXPAND, 0)
        self.notebook_2_pane_2.SetSizer(sizer_10)
        self.notebook_2.AddPage(self.notebook_2_pane_1, _("Hex"))
        self.notebook_2.AddPage(self.notebook_2_pane_2, _("Text"))
        sizer_7.Add(self.notebook_2, 1, wx.EXPAND, 0)
        self.window_3_pane_2.SetSizer(sizer_7)
        self.window_3.SplitHorizontally(self.window_3_pane_1, self.window_3_pane_2, 300)
        sizer_5.Add(self.window_3, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_5)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 173)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def tree_fs_item_changed(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_item_changed'"
        self.FsTreeItemSelected(event)
        event.Skip()

    def tree_fs_item_expanding(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_item_expanding' not implemented!"
        event.Skip()

    def tree_fs_item_activated(self, event):  # wxGlade: MainFrame.<event_handler>
        self.FsTreeItemSelected(event)
        event.Skip()

    def tree_fs_item_collapsing(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_item_collapsing' not implemented!"
        event.Skip()

    def tree_fs_item_collapsed(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_item_collapsed' not implemented!"
        event.Skip()

    def tree_fs_item_expanded(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_item_expanded' not implemented!"
        event.Skip()

    def tree_fs_item_changing(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_item_changing'"
        event.Skip()

    def list_records_item_selected(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_item_selected' not implemented!"
        event.Skip()

    def list_records_item_focused(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_item_focused' not implemented!"
        event.Skip()

    def list_records_insert_item(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_insert_item' not implemented!"
        event.Skip()

    def list_records_col_click(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_col_click' not implemented!"
        event.Skip()

    def list_records_item_activated(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_item_activated' not implemented!"
        event.Skip()

    def list_records_item_deselected(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_item_deselected' not implemented!"
        event.Skip()

    def list_records_col_right_click(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_col_right_click' not implemented!"
        event.Skip()

    def list_records_item_right_click(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'list_records_item_right_click' not implemented!"
        event.Skip()

    def OpenSource(self, event):  # wxGlade: MainFrame.<event_handler>
        dlg = wx.FileDialog(
            self,
            message="Choose Image",
            wildcard="All files (*.*)|*.*",
            style=wx.OPEN | wx.CHANGE_DIR
        )

        if dlg.ShowModal() == wx.ID_OK:
            paths = dlg.GetPaths()
            for path in paths:
                self.EnumerateSource(path)
                print('           %s\n' % path)

        dlg.Destroy()
        event.Skip()

    def ExitApplication(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'ExitApplication' not implemented!"
        event.Skip()

    def LoadIconList(self):
        isz = (16, 16)
        self.tree_fs.icon_list = wx.ImageList(*isz)

        folder = wx.Icon(
            'icons/ic_folder_black_18dp.png',
            wx.BITMAP_TYPE_PNG,
            isz[0],
            isz[1],
        )
        folder_open = wx.Icon(
            'icons/ic_folder_open_black_18dp.png',
            wx.BITMAP_TYPE_PNG,
            isz[0],
            isz[1],
        )

        self.tree_fs.icon_fldridx = self.tree_fs.icon_list.AddIcon(folder)
        self.tree_fs.icon_fldropenidx = self.tree_fs.icon_list.AddIcon(folder_open)
        self.tree_fs.icon_fileidx = self.tree_fs.icon_list.AddIcon(wx.ArtProvider.GetIcon(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))

        self.tree_fs.SetImageList(self.tree_fs.icon_list)

    def EnumerateSource(self,filename):
        self.evidenceManager.EnumerateEvidenceSource(
            filename
        )

    def tree_fs_item_gettooltip(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_item_gettooltip' not implemented!"
        event.Skip()

    def tree_fs_sel_changed(self, event):  # wxGlade: MainFrame.<event_handler>
        self.FsTreeItemSelected(event)
        event.Skip()

    def tree_fs_sel_changing(self, event):  # wxGlade: MainFrame.<event_handler>
        print "Event handler 'tree_fs_sel_changing' not implemented!"
        event.Skip()

    def FsTreeItemSelected(self,event):
        print('FsTreeItemSelected')
        item = event.GetItem()
        node = self.tree_fs.GetItemData(item).Data

        # Set Properties
        self._SetProperties(node)

        # Enumerate Folders
        self._EnumFolders(item,node)

        print item

    def _SetProperties(self,node):
        Properties.EnumerateProperties(
            self.property_grid_1,
            node
        )

    def _EnumFolders(self,tree_item,node):
        FileSystemEnumerator.EnumerateNode(
            self,
            tree_item,
            node
        )
# end of class MainFrame

class MyFileDropTarget(wx.FileDropTarget):
    def __init__(self, window):
        wx.FileDropTarget.__init__(self)
        self.window = window

    def OnDropFiles(self, x, y, filenames):
        wx.MessageBox(
            u"Items Added:\n{}".format("\n".join(filenames)), #message
            u'Evidence Dropped', #title
            wx.OK | wx.ICON_INFORMATION
        )
        for filename in filenames:
            self.window.EnumerateSource(
                filename
            )

            # evt = EvidenceLoadedEvent(myEVT_EVIDENCELOADED, -1)
            # evt.SetClientData(filename)
            # wx.PostEvent(self.window, evt)

        pass

myEVT_EVIDENCELOADED = wx.NewEventType()
EVT_EVIDENCELOADED = wx.PyEventBinder(myEVT_EVIDENCELOADED, 1)
class EvidenceLoadedEvent(wx.PyCommandEvent):
    """Event to signal that a count value is ready"""
    def __init__(self, etype, eid, value=None):
        """Creates the event object"""
        wx.PyCommandEvent.__init__(self, etype, eid)
        self._value = value

        print 'EVIDENCELOADED EVENT'

    def GetValue(self):
        """Returns the value from the event.
        @return: the value of this event

        """
        print 'EVIDENCELOADED EVENT'